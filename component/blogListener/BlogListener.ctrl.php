<?php

namespace Neoan3\Components;

use Neoan3\Apps\Template;
use Neoan3\Frame\Rbm;

/**
 * Class BlogListener
 * Generated by neoan3-cli
 * @package Neoan3\Components
 */

class BlogListener extends Rbm
{
    private array $data = [];
    protected string $localArticleLocation = '';

    /**
     * init route 
     */
    function init()
    {
        $this->credentials = getCredentials();
        $blogSecret = $this->credentials['blua-blog']['blua-secret'];
        $this->receiverTest($blogSecret);
    }

    private function receiverTest($test)
    {
        if(isset($_SERVER['HTTP_AUTHORIZATION']) && substr($_SERVER['HTTP_AUTHORIZATION'], 7) == $test){
            $this->fetchData();
            $this->setLocalArticleLocation();
            $this->logger($this->data);
            switch ($this->data['event']){
                case 'create':
                    // TODO: create an updated function
                case 'updated':
                    $this->writeToFile();
                    break;
                case 'delete':
                    // TODO: Create a delete a delete function
                    break;
            }
        }
    }

    private function logger($input)
    {
        file_put_contents(__DIR__ . '/log.json', json_encode($input));
    }

    private function fetchData()
    {
        $data = file_get_contents('php://input');
        if(!empty($data)){
            $this->data = json_decode($data, true);
        }
    }

    //TODO: create an update Menu function
    private function writeAndGetMenu()
    {
        $jsonFilePath = path . '/asset/menu.json';
        if(file_exists($jsonFilePath)){
            $menuJson = json_decode(file_get_contents($jsonFilePath), true);
        } else {
            $menuJson = [];
        }
        $found = false;
        foreach ($menuJson as $menuItem){
            if($menuItem['link'] == $this->data['payload']['slug'] . '.html'){
                $menuItem['name'] = $this->data['payload']['name'];
                $found = true;
            }
        }
        if(!$found){
            $menuJson[] = [
                'link' => $this->data['payload']['slug'] . '.html',
                'name'=> $this->data['payload']['name']
            ];
        }
        file_put_contents($jsonFilePath, json_encode($menuJson));
        return $menuJson;
    }

    public function setLocalArticleLocation()
    {
        $this->localArticleLocation = path . '/component/blogArchive/'. $this->data['payload']['slug'] . '.html';
    }

    private function writeToFile()
    {
        if($this->data['payload']['publish_date']){
            $this->data['payload']['links'] = $this->writeAndGetMenu();
            $content = Template::embraceFromFile( 'asset/blogformat.html', $this->data['payload']);
            file_put_contents($this->localArticleLocation, $content);
        }
    }
}
